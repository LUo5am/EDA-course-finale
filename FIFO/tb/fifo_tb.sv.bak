module fifo_tb;
    logic w_clk = 0, r_clk = 0;
    logic rst_n = 0;
    logic [15:0] data_in, data_out;
    logic w_en, r_en, full, empty;
    
    // 生成100MHz时钟
    always #5 w_clk = ~w_clk;
    always #5.1 r_clk = ~r_clk;
    
    async_fifo_top dut(.*);
    
initial begin
    rst_n = 0;
    repeat(2) @(posedge w_clk); // 写时钟域同步
    repeat(2) @(posedge r_clk); // 读时钟域同步
    rst_n <= 1;
end
    
task test_full();
    // 写入64个数据后关闭写使能
    repeat(64) begin
        @(posedge w_clk);
        w_en <= 1;
        data_in <= $urandom();
    end
    @(posedge w_clk) w_en <= 0;  // 关闭写使能
    
    // 验证满标志后尝试溢出写入
    assert(full) else $error("Full flag not asserted when FIFO should be full");
    @(posedge w_clk);
    w_en <= 1;  // 测试溢出保护
    data_in <= $urandom();
    assert(!full) else $error("Full flag not cleared");
endtask
logic [15:0] data_queue[$];  // 存储写入数据队列

initial begin
    // 数据写入时记录
    forever @(posedge w_clk) if (w_en && !full) 
        data_queue.push_back(data_in);
    
    // 数据读取时校验
    forever @(posedge r_clk) if (r_en && !empty) begin
        if (data_out !== data_queue.pop_front())
            $error("Data mismatch: exp=%h, act=%h", data_queue[0], data_out);
    end
end
initial begin
    // 基础测试
    test_full();
    test_empty();
    test_mixed(2000);  // 混合读写2000次
end
task test_empty();
    repeat(64) begin
        @(posedge r_clk);
        r_en <= 1;
    end
    assert(empty) else $error("Empty flag error");
    @(posedge r_clk);
    r_en <= 1;  // 测试读空后继续读取
    assert(empty) else $error("Empty flag not updated");
endtask

task test_mixed(input int cycles);
    for (int i=0; i<cycles; i++) begin
        if ($urandom_range(100) < 30) begin // 调整读写比例
            @(posedge w_clk) w_en <= !full;
        end else begin
            @(posedge r_clk) r_en <= !empty;
        end
        @(posedge w_clk or posedge r_clk); 
    end
endtask
endmodule