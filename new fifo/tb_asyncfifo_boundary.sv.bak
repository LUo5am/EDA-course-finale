module tb_asyncfifo_boundary (
    input  logic tb_wclk,
    input  logic tb_rclk,
    output logic wr_en,
    input  logic wr_full,
    output logic [15:0] wr_data,  // ??1/3
    input  logic rd_empty,
    input  logic [5:0] wr_usedw,   // ?????6?
    input  logic [5:0] rd_usedw,
    output logic rd_en
);

parameter FIFO_DEPTH = 64;
task automatic test_boundary();
    // ????
    $display("=== Overflow Test ===");
    repeat(FIFO_DEPTH) write_transaction($urandom());
    write_transaction($urandom());  // ?????
    assert(wr_full && wr_usedw == FIFO_DEPTH) 
        else $error("Overflow detection failed");
    
    // ????
    $display("=== Underflow Test ===");
    repeat(FIFO_DEPTH) read_transaction();
    read_transaction();  // ?????
    assert(rd_empty && rd_usedw == 0) 
        else $error("Underflow detection failed");
    
    // ??????
    $display("=== Pointer Wrap Test ===");
    reset_fifo();
    repeat(FIFO_DEPTH*2) begin
        write_transaction($urandom());
        read_transaction();
    end
    assert(wr_usedw == 0 && rd_usedw == 0)
        else $error("Pointer wrap error");
endtask

task write_transaction(input [15:0] data);
    @(posedge tb_wclk);
    wr_en = !wr_full;
    wr_data = data;
    @(posedge tb_wclk);
    wr_en = 0;
endtask

task read_transaction();
    @(posedge tb_rclk);
    rd_en = !rd_empty;
    @(posedge tb_rclk);
    rd_en = 0;
endtask
endmodule
